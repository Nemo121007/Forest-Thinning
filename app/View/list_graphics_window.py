"""A Qt widget class representing a window for managing and displaying graphics lists.

Main Window Features:
    - A table displaying relationships between components

    __init__():
        Initializes the window and its components

    _get_list_components() -> QWidget:
        Creates and returns the upper section with three columns for managing components

    _create_item_block(str_line: str, type_settings: TypeSettings) -> QWidget:
        Creates a block widget for individual items

    get_list_graphics() -> QWidget:
        Creates and returns the lower section with a table of graphics

This class requires PySide6 and appropriate reference data through ReferenceData class.
"""

from PySide6.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QLabel,
    QPushButton,
    QHBoxLayout,
    QGridLayout,
    QScrollArea,
)
from PySide6.QtGui import QColor, QPalette
from PySide6.QtCore import Qt
from ..background_information.Type_settings import TypeSettings
from ..background_information.Reference_data import ReferenceData


class ListGraphicsWindow(QWidget):
    """A Qt widget class representing a window for managing and displaying graphics lists.

    This class creates a window with three main sections for managing areas, breeds, and condition types,
    along with a table displaying their relationships. It provides functionality for adding, editing,
    and deleting items in each category.

    Attributes:
        None

    Methods:
        __init__(): Initializes the window and its components
        _get_list_components() -> QWidget: Creates and returns the upper section with three columns
        for managing components
        _create_item_block(str_line: str, type_settings: TypeSettings) -> QWidget: Creates a block widget
        for individual items
        _get_list_graphics() -> QWidget: Creates and returns the lower section with a table of graphics

    The window consists of:
        - Three columns for managing areas, breeds, and condition types
        - Add buttons for each category
        - A table displaying the relationships between these components
        - Scrollable content area
        - Main add button at the bottom

    Note:
        This class requires PyQt5/PySide2 and appropriate reference data through ReferenceData class.
    """

    def __init__(self) -> None:
        """Initializes the ListGraphicsWindow widget.

        This constructor sets up the main window for displaying graphics lists. It performs the following:
        1. Adds test data to ReferenceData
        2. Initializes the parent QWidget
        3. Sets window properties (title, geometry)
        4. Configures white background
        5. Creates vertical layout with list components and graphics

        Window Parameters:
            Title: "Список графиков" (List of Graphics)
            Size: 600x500 pixels
            Position: 100,100 (x,y coordinates)
            Background: White

        The window contains two main components:
        - List of components (generated by _get_list_components)
        - List of graphics (generated by _get_list_graphics)
        """
        # Заполнение тестовыми данными
        ReferenceData.add_areas(code_name="test", name_areas="Тест")
        ReferenceData.add_areas(code_name="test1", name_areas="Тест1")
        ReferenceData.add_breeds(code_name="test11", name_breed="Тест12")
        ReferenceData.add_breeds(code_name="test21", name_breed="Тест22")
        ReferenceData.add_type_conditions(code_name="test31", name_type_conditions="Тест32")
        ReferenceData.add_type_conditions(code_name="test21", name_type_conditions="Тест42")
        # Заполнение тестовыми данными

        super().__init__()
        self.setWindowTitle("Список графиков")
        self.setGeometry(100, 100, 600, 500)

        # Главный фон
        self.setAutoFillBackground(True)
        palette = self.palette()
        palette.setColor(QPalette.Window, QColor("white"))
        self.setPalette(palette)

        # Основная вертикальная компоновка
        layout = QVBoxLayout()

        list_components = ListGraphicsWindow._get_list_components()
        layout.addWidget(list_components)

        list_graphics = ListGraphicsWindow._get_list_graphics()
        layout.addWidget(list_graphics)

        self.setLayout(layout)

    @staticmethod
    def _get_list_components() -> QWidget:
        """Creates and returns a widget containing three vertical columns for areas, breeds and condition types.

        Each column contains:
        - A header label
        - A scrollable list of items
        - An "Add" button at the bottom
        The columns are laid out horizontally with equal spacing and margins.
        Items in each column are populated from ReferenceData:
        - Areas from ReferenceData.areas()
        - Breeds from ReferenceData.breeds()
        - Condition types from ReferenceData.type_conditions()

        Returns:
            QWidget: Main widget containing the three-column layout.
        """
        main_widget = QWidget()
        main_widget.setContentsMargins(5, 5, 5, 5)

        horizontal_layout = QHBoxLayout()
        main_widget.setLayout(horizontal_layout)

        areas_layout = QVBoxLayout()

        areas_names = QLabel("Регионы")
        areas_layout.addWidget(areas_names)

        blocks_areas_widget = QWidget()
        blocks_areas_layout = QVBoxLayout(blocks_areas_widget)
        list_area_widgets = ReferenceData.areas().keys()
        for name_area in list_area_widgets:
            area_block = ListGraphicsWindow._create_item_block(str_line=name_area, type_settings=TypeSettings.AREA)
            blocks_areas_layout.addWidget(area_block)
        areas_layout.addWidget(blocks_areas_widget)

        btn_add_area = QPushButton("Добавить регион")
        btn_add_area.setFixedHeight(50)
        btn_add_area.setStyleSheet("background-color: #D5E8D4; text-align: center;")
        areas_layout.addWidget(btn_add_area)

        breeds_layout = QVBoxLayout()
        breeds_names = QLabel("Породы")
        breeds_layout.addWidget(breeds_names)

        blocks_breeds_widget = QWidget()
        blocks_breeds_layout = QVBoxLayout(blocks_breeds_widget)
        list_breeds_widgets = ReferenceData.breeds().keys()
        for name_breed in list_breeds_widgets:
            breed_block = ListGraphicsWindow._create_item_block(str_line=name_breed, type_settings=TypeSettings.BREED)
            blocks_breeds_layout.addWidget(breed_block)
        breeds_layout.addWidget(blocks_breeds_widget)

        btn_add_breed = QPushButton("Добавить породу")
        btn_add_breed.setFixedHeight(50)
        btn_add_breed.setStyleSheet("background-color: #D5E8D4; text-align: center;")
        breeds_layout.addWidget(btn_add_breed)

        types_conditions_layout = QVBoxLayout()

        types_conditions_names = QLabel("Типы условий")
        types_conditions_layout.addWidget(types_conditions_names)

        blocks_types_conditions_widget = QWidget()
        blocks_types_conditions_layout = QVBoxLayout(blocks_types_conditions_widget)
        list_types_conditions_widgets = ReferenceData.type_conditions().keys()
        for name_types_conditions in list_types_conditions_widgets:
            types_conditions_block = ListGraphicsWindow._create_item_block(
                str_line=name_types_conditions, type_settings=TypeSettings.CONDITION
            )
            blocks_types_conditions_layout.addWidget(types_conditions_block)
        types_conditions_layout.addWidget(blocks_types_conditions_widget)

        btn_add_types_conditions = QPushButton("Добавить тип условий")
        btn_add_types_conditions.setFixedHeight(50)
        btn_add_types_conditions.setStyleSheet("background-color: #D5E8D4; text-align: center;")
        types_conditions_layout.addWidget(btn_add_types_conditions)

        horizontal_layout.addLayout(areas_layout)
        horizontal_layout.addLayout(breeds_layout)
        horizontal_layout.addLayout(types_conditions_layout)

        return main_widget

    def _create_item_block(str_line: str, type_settings: TypeSettings) -> QWidget:
        """Create a widget block containing a label and two buttons (edit and delete).

        Args:
            str_line (str): Text to be displayed in the label
            type_settings (TypeSettings): Settings for the item type

        Returns:
            QWidget: A horizontal widget block containing label and control buttons
                - Main widget with horizontal layout
                - Label with provided text
                - Edit button (green background)
                - Delete button (red background).
        """
        main_widget = QWidget()
        layout_block = QHBoxLayout(main_widget)

        label = QLabel(str_line)
        layout_block.addWidget(label)

        btn_item_block_edit = QPushButton()
        btn_item_block_edit.setFixedHeight(50)
        btn_item_block_edit.setStyleSheet("background-color: #D5E8D4; text-align: center;")
        layout_block.addWidget(btn_item_block_edit)

        btn_item_block_delete = QPushButton()
        btn_item_block_delete.setFixedHeight(50)
        btn_item_block_delete.setStyleSheet("background-color: #F8CECC; text-align: center;")
        layout_block.addWidget(btn_item_block_delete)

        return main_widget

    @staticmethod
    def _get_list_graphics() -> QWidget:
        """Creates and returns a QWidget containing a list-based graphical interface.

        The interface consists of:
        - A header row with columns for Regions, Breeds, Conditions, and a delete column
        - A scrollable area containing rows of data from ReferenceData
        - Each row displays region, breed, and condition information with a delete button
        - An "Add" button at the bottom to create new entries

        Returns:
            QWidget: A widget containing the complete list graphics interface with the following structure:
                - Header labels (Regions, Breeds, Conditions)
                - Scrollable content area with data rows
                - Each row contains:
                    * Region label
                    * Breed label
                    * Condition label
                    * Delete button
                - Add button at bottom.
        """
        # Основной виджет
        main_widget = QWidget()
        main_widget.setContentsMargins(5, 5, 5, 5)  # Отступы, как в _get_list_components()

        # Главный вертикальный макет
        main_layout = QVBoxLayout(main_widget)

        # Заголовки столбцов
        header_widget = QWidget()
        header_layout = QHBoxLayout(header_widget)
        header_layout.setContentsMargins(0, 0, 0, 0)
        header_layout.setSpacing(0)

        headers = ["Регионы", "Породы", "Условия", ""]
        for header_text in headers:
            label = QLabel(header_text)
            label.setAlignment(Qt.AlignCenter)
            label.setStyleSheet("background-color: lightgray; border: 1px solid black; font-weight: bold;")
            header_layout.addWidget(label)

        # Прокручиваемая область
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)

        # Виджет содержимого таблицы
        content_widget = QWidget()
        content_layout = QGridLayout(content_widget)
        content_layout.setContentsMargins(0, 0, 0, 0)
        content_layout.setSpacing(0)

        # Заполнение данными (пример с ReferenceData)
        areas = list(ReferenceData.areas().keys())
        breeds = list(ReferenceData.breeds().keys())
        conditions = list(ReferenceData.type_conditions().keys())

        num_rows = 10  # Ограничимся тремя строками для примера, как в изображении
        for row in range(num_rows):
            # Текст для ячеек (циклическое использование данных)
            area_text = areas[row % len(areas)] if areas else "Регион " + str(row + 1)
            breed_text = breeds[row % len(breeds)] if breeds else "Порода " + str(row + 1)
            condition_text = conditions[row % len(conditions)] if conditions else "Условия " + str(row + 1)

            # Метка для "Регионы"
            area_label = QLabel(area_text)
            area_label.setAlignment(Qt.AlignCenter)
            area_label.setStyleSheet("border: 1px solid black;")
            area_label.setFixedWidth(150)
            content_layout.addWidget(area_label, row, 0)

            # Метка для "Породы"
            breed_label = QLabel(breed_text)
            breed_label.setAlignment(Qt.AlignCenter)
            breed_label.setStyleSheet("border: 1px solid black;")
            content_layout.addWidget(breed_label, row, 1)

            # Метка для "Условия"
            condition_label = QLabel(condition_text)
            condition_label.setAlignment(Qt.AlignCenter)
            condition_label.setStyleSheet("border: 1px solid black;")
            content_layout.addWidget(condition_label, row, 2)

            # Красная кнопка для "Удаление"
            delete_button = QPushButton("")
            delete_button.setStyleSheet("background-color: #F8CECC; border: 1px solid black;")
            content_layout.addWidget(delete_button, row, 3)

        # Установка содержимого в прокручиваемую область
        scroll_area.setWidget(content_widget)

        # Кнопка "Добавить"
        add_button = QPushButton("+")
        add_button.setFixedHeight(50)
        add_button.setStyleSheet("background-color: #D5E8D4; text-align: center;")

        # Сборка макета
        main_layout.addWidget(header_widget, 0)  # Заголовки не растягиваются
        main_layout.addWidget(scroll_area, 1)  # Прокручиваемая область занимает остальное пространство
        main_layout.addWidget(add_button, 0)  # Кнопка "Добавить" не растягивается

        return main_widget
